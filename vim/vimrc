" Best view with a 256 color terminal and Powerline fonts

set nocompatible
filetype off
call plug#begin('~/.vim/plugged')


Plug 'gmarik/vundle'

Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'
Plug 'tomtom/tcomment_vim'
Plug 'bling/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'dyng/ctrlsf.vim'
Plug 'tpope/vim-fugitive'
" Plug 'tpope/vim-sleuth'
Plug 'sheerun/vim-polyglot'

Plug 'kshenoy/vim-signature'
Plug 'fatih/vim-go'
Plug 'christoomey/vim-tmux-navigator'

" Plug 'rking/ag.vim'

" Color Themes
Plug 'flazz/vim-colorschemes'
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

call plug#end()

" colorscheme Monokai
" colorscheme ray
colorscheme rayje

""""""""
if has('autocmd')
  filetype plugin indent on
endif

if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

if has('clipboard')
  if $TMUX == ''
    set clipboard+=unnamed
  endif
endif

" Use :help 'option' to see the documentation for the given option.
set autoindent
set backspace=indent,eol,start
set complete-=i
set showmatch
set showmode
set smarttab

set nrformats-=octal
set shiftround

set ttimeout
set ttimeoutlen=50

set incsearch
" Use ,c to clear the highlighting of :set hlsearch.
nnoremap <silent> <leader>c :nohl<CR>

set laststatus=2
set ruler
set showcmd
set wildmenu

set autoread

set encoding=utf-8
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab
" set listchars=tab:▒░,trail:▓
" set list

inoremap <C-U> <C-G>u<C-U>

set number
set hlsearch
set ignorecase
set smartcase

" Don't use Ex mode, use Q for formatting
map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" do not history when leavy buffer
set hidden

set nobackup
set nowritebackup
set noswapfile
set fileformats=unix,dos,mac

" exit insert mode 
inoremap <C-c> <Esc>

set completeopt=menuone,longest,preview

"
" Plugins config
"

" CtrlP
set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.data/* 

" Ultisnip
" NOTE: <f1> otherwise it overrides <tab> forever
let g:UltiSnipsExpandTrigger="<f1>"
let g:UltiSnipsJumpForwardTrigger="<f1>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:did_UltiSnips_vim_after = 1

" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1

" Find
map <C-f> /
" indend / deindent after selecting the text with (⇧ v), (.) to repeat.
" vnoremap <Tab> >
" vnoremap <S-Tab> <
" comment / decomment & normal comment behavior
vmap <C-m> gc
" Disable tComment to escape some entities
let g:tcomment#replacements_xml={}
" Text wrap simpler, then type the open tag or ',"
" vmap <C-w> S
" Tabs
" let g:airline_theme='base16'
" let g:airline_theme='murmur'
let g:airline_theme='bubblegum'
" let g:airline_theme='badwolf'
let g:airline#extensions#tabline#enabled = 1
" nnoremap <C-b>  :tabprevious<CR>
" inoremap <C-b>  <Esc>:tabprevious<CR>i
" nnoremap <C-n>  :tabnext<CR>
" inoremap <C-n>  <Esc>:tabnext<CR>i
" nnoremap <C-t>  :tabnew<CR>
" inoremap <C-t>  <Esc>:tabnew<CR>i
" nnoremap <C-k>  :tabclose<CR>
" inoremap <C-k>  <Esc>:tabclose<CR>i

" lazy ':'
map \ :

let mapleader = ','
nnoremap <Leader>p :set paste<CR>
nnoremap <Leader>o :set nopaste<CR>
noremap  <Leader>g :GitGutterToggle<CR>

nmap  <Leader>w <Plug>CtrlSFCwordExec
noremap <Leader>v :source ~/.vimrc<CR>

" this machine config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1


" Split screen vertically
nmap <F7> :vsplit .<CR>

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

nnoremap <C-n> :bnext<CR>
nnoremap <C-b> :bprevious<CR>
