" Best view with a 256 color terminal and Powerline fonts

set nocompatible
filetype off
set shortmess+=I
call plug#begin('~/.vim/plugged')


" Plug 'gmarik/vundle'

Plug 'ctrlpvim/ctrlp.vim'
Plug 'tomtom/tcomment_vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'airblade/vim-gitgutter'
Plug 'dyng/ctrlsf.vim'
Plug 'tpope/vim-fugitive'
Plug 'rayje/vim-sensible'
Plug 'tpope/vim-surround'
" Plug 'tpope/vim-obsession'
Plug 'tpope/vim-dispatch'
" Plug 'sheerun/vim-polyglot'
" Plug 'kshenoy/vim-signature'
Plug 'fatih/vim-go'
Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'tmhedberg/matchit'
Plug 'benmills/vimux'
" Plug 'dangerzone/ranger.vim'
Plug 'francoiscabrol/ranger.vim'
Plug 'majutsushi/tagbar'
Plug 'rbgrouleff/bclose.vim'
" Plug 'moll/vim-bbye'
Plug 'miyakogi/conoline.vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" Plug 'ajk17/VimCompletesMe'
" Plug 'xolox/vim-easytags'
" Plug 'xolox/vim-misc'
" Plug 'vim-scripts/LustyExplorer'

" Plug 'mtth/scratch.vim'

" Color Themes
" Plug 'flazz/vim-colorschemes'

call plug#end()

colorscheme rayje

""""""""
set clipboard=unnamed
" set synmaxcol=12

" Use :help 'option' to see the documentation for the given option.
set showmatch
set showmode

set shiftround

" Use ,c to clear the highlighting of :set hlsearch.
nnoremap <silent> <Leader>hl :nohl<CR>

set showcmd

if !has('nvim')
    set encoding=utf-8
endif
set tabstop=4 shiftwidth=4 softtabstop=4 expandtab

inoremap <C-U> <C-G>u<C-U>

set number
set hlsearch
set ignorecase
set smartcase

" Don't use Ex mode, use Q for formatting
" map Q gq

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" do not history when leavy buffer
set hidden

set nobackup
set nowritebackup
set noswapfile
set fileformats=unix,dos,mac

set completeopt=menuone,longest,preview

"
" Plugins config
"

" CtrlP
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'

" Set tags location
set tags=./tags;

" Ultisnip
" NOTE: <f1> otherwise it overrides <tab> forever
" let g:UltiSnipsExpandTrigger="<f1>"
" let g:UltiSnipsJumpForwardTrigger="<f1>"
" let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" let g:did_UltiSnips_vim_after = 1

" vim-airline
let g:airline_theme='bubblegum'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_close_button = 1
let g:airline#extensions#tabline#close_symbol = 'X'

" comment / decomment & normal comment behavior
" vmap <C-m> gc
" Disable tComment to escape some entities
let g:tcomment#replacements_xml={}


let mapleader = ','
" nnoremap <Leader>p :set paste<CR>
" nnoremap <Leader>o :set nopaste<CR>
" noremap  <Leader>g :GitGutterToggle<CR>
let g:gitgutter_realtime = 0
set pastetoggle=<F2>

" ctrlsf
nmap  <Leader>sw <Plug>CtrlSFCwordExec
nmap  <Leader>sf <Plug>CtrlSFPrompt
nnoremap <Leader>st :CtrlSFToggle<CR>

let g:go_fmt_command = "goimports"
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

nnoremap <C-n> :bnext<CR>
nnoremap <C-b> :bprevious<CR>

noremap <Leader>nt :NERDTreeToggle<CR>

" fugitive git bindings
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gp :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Gpush<Space>
nnoremap <space>gpl :Dispatch! git pull<CR>

nnoremap <C-x>v :e ~/.vimrc<CR>
nnoremap <C-x>t :e ~/.tmux.conf<CR>
nnoremap <C-x>c :e ~/.vim/colors/rayje.vim<CR>
noremap <Leader>v :source ~/.vimrc<CR>

" let g:scratch_height = 1
let g:scratch_top = 0
let g:scratch_horizontal = 0
let g:scratch_autohide = 0

let g:conoline_auto_enable = 1

function! NumberToggle()
    if(&relativenumber == 1)
        set nornu
    else
        set rnu
    endif
endfunc

nnoremap <Leader>n :call NumberToggle()<CR>

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" down, ignore line wrap
nnoremap j gj
" up, ignore line wrap
nnoremap k gk

noremap <F1> <NOP>

let g:VimuxRunnerType = "pane"
map <Leader>bt :call VimuxRunCommand("docker-compose run --rm " . fnamemodify(getcwd(), ':t') . " bin/test; echo $?")<CR>
map <Leader>td :call VimuxRunCommand("docker-compose run --rm " . fnamemodify(getcwd(), ':t') . " bash")<CR>
map <Leader>rt :call VimuxRunCommand("bin/test; echo $?")<CR>
map <Leader>vl :VimuxRunLastCommand<CR>
map <Leader>vq :VimuxCloseRunner<CR>
map <Leader>vs :VimuxInterruptRunner<CR>
map <Leader>vi :VimuxInspectRunner<CR>

nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

map <leader>ro :call OpenRanger()<CR>

nnoremap <Leader>tb :TagbarToggle<CR>
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1

noremap <Leader>pi :PlugInstall<CR>
noremap <Leader>pu :PlugUpgrade<CR>
noremap <Leader>pc :PlugClean<CR>

nnoremap <Leader>\ <C-w>v<C-w>l
nnoremap <Leader>- <C-w>s<C-w>j

noremap <Leader>ce :ConoLineEnable<CR>
noremap <Leader>cd :ConoLineDisable<CR>

noremap <Leader>gd :GoDef<CR>

nnoremap <silent> <Leader>bd :Bclose<CR>
nnoremap <Leader>sp i<CR><ESC>

nnoremap Q <nop>

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects
  " .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

if has('nvim')
    nmap <silent> <bs> :<c-u>TmuxNavigateLeft<cr>
endif

autocmd BufRead *.rb setlocal syntax=off

nmap <Leader>cf :let @*=expand("%")<CR>
nmap <Leader>cp :let @*=expand("%:p")<CR>

noremap s <NOP>
cnoremap W w<CR>

set re=1

nnoremap <Leader>Q :%s/=\(\x\x\<BAR>\n\)/\=submatch(1)=='\n'?'':nr2char('0x'.submatch(1))/ge<CR>
vnoremap <Leader>Q :s/=\(\x\x\<BAR>\n\)/\=submatch(1)=='\n'?'':nr2char('0x'.submatch(1))/ge<CR>
